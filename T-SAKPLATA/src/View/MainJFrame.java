package View;

import Data.DBFake;
import Entity.Cheque;
import Entity.Cliente;
import EntityDAO.ClienteDAO;
import Entity.CuentaAhorro;
import Entity.CuentaCorriente;
import Entity.CuentaJoven;
import Entity.Historial;
import java.awt.Color;
import javax.swing.table.DefaultTableModel;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;

public class MainJFrame extends javax.swing.JFrame {

    private ArrayList<Cliente> allClientes = new ArrayList();
    private ArrayList<CuentaAhorro> allCuentasAhorro = new ArrayList();
    private ArrayList<CuentaCorriente> allCuentasCorriente = new ArrayList();
    private ArrayList<CuentaJoven> allCuentasJoven = new ArrayList();
    private Cliente cliente;
    private CuentaAhorro ctaAhorro;
    private CuentaCorriente ctaCorriente;
    private CuentaJoven ctaJoven;

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
        /* al usar db usar controller - por ahora recorrer arreglos
        this.clieteControl = new ClienteController();
        this.cuentaControl = new CuentaController();
         */
        initData(); //Chage the data.
        initDefaultGUI(); //inicialize jTexField, JButton, etc, by default

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldRut = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldNombres = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldApellidos = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldFechaNac = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldEdad = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldDomicilio = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldFono = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldMail = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jButtonNewSave = new javax.swing.JButton();
        jButtonEditCancel = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabelTipo = new javax.swing.JLabel();
        jTextFieldTipoCta = new javax.swing.JTextField();
        jLabelNro = new javax.swing.JLabel();
        jLabelEstado = new javax.swing.JLabel();
        jTextFieldNumero = new javax.swing.JTextField();
        jTextFieldEstado = new javax.swing.JTextField();
        jLabelLineaCred = new javax.swing.JLabel();
        jTextFieldLineaCred = new javax.swing.JTextField();
        jLabelCheque = new javax.swing.JLabel();
        jTextFieldCheques = new javax.swing.JTextField();
        jLabelSaldo = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jButtonDepositar = new javax.swing.JButton();
        jButtonRetirar = new javax.swing.JButton();
        jButtonNewCuenta = new javax.swing.JButton();
        jTextFieldSaldo = new javax.swing.JTextField();
        jTextFieldMonto = new javax.swing.JTextField();
        jLabelMonto = new javax.swing.JLabel();
        jLabelSinCuenta = new javax.swing.JLabel();
        jComboBoxTipoCuenta = new javax.swing.JComboBox<>();
        jButtonCerrar = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jTabbedPanel = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableHistorial = new javax.swing.JTable();
        jPanelCheque = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCheque = new javax.swing.JTable();
        jButtonCheque = new javax.swing.JButton();
        jLabelChequeDest = new javax.swing.JLabel();
        jTextFieldChequeDest = new javax.swing.JTextField();
        jLabelChequeMonto = new javax.swing.JLabel();
        jTextFieldChequeMonto = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jTextFieldBuscar = new javax.swing.JTextField();
        jButtonBuscar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(java.awt.Color.white);
        setIconImages(null);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cliente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(270, 380));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Rut");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 35, -1, -1));

        jTextFieldRut.setEditable(false);
        jPanel1.add(jTextFieldRut, new org.netbeans.lib.awtextra.AbsoluteConstraints(92, 32, 120, -1));

        jLabel2.setText("Nombres");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 66, -1, -1));

        jTextFieldNombres.setEditable(false);
        jPanel1.add(jTextFieldNombres, new org.netbeans.lib.awtextra.AbsoluteConstraints(92, 63, 120, -1));

        jLabel3.setText("Apellidos");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 97, -1, -1));

        jTextFieldApellidos.setEditable(false);
        jPanel1.add(jTextFieldApellidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(92, 94, 120, -1));

        jLabel4.setText("Fecha Nac.");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 128, -1, -1));

        jTextFieldFechaNac.setEditable(false);
        jPanel1.add(jTextFieldFechaNac, new org.netbeans.lib.awtextra.AbsoluteConstraints(92, 125, 120, -1));

        jLabel5.setText("Edad");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 159, -1, -1));

        jTextFieldEdad.setEditable(false);
        jPanel1.add(jTextFieldEdad, new org.netbeans.lib.awtextra.AbsoluteConstraints(92, 156, 120, -1));

        jLabel6.setText("Domicilio");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 190, -1, -1));

        jTextFieldDomicilio.setEditable(false);
        jPanel1.add(jTextFieldDomicilio, new org.netbeans.lib.awtextra.AbsoluteConstraints(92, 187, 120, -1));

        jLabel7.setText("Fono");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 221, -1, -1));

        jTextFieldFono.setEditable(false);
        jPanel1.add(jTextFieldFono, new org.netbeans.lib.awtextra.AbsoluteConstraints(92, 218, 120, -1));

        jLabel8.setText("Mail");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 252, -1, -1));

        jTextFieldMail.setEditable(false);
        jPanel1.add(jTextFieldMail, new org.netbeans.lib.awtextra.AbsoluteConstraints(92, 249, 120, -1));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 204, 10));

        jButtonNewSave.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonNewSave.setText("NewSave");
        jButtonNewSave.setMaximumSize(new java.awt.Dimension(78, 24));
        jButtonNewSave.setMinimumSize(new java.awt.Dimension(78, 24));
        jButtonNewSave.setPreferredSize(new java.awt.Dimension(78, 24));
        jButtonNewSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewSaveActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonNewSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 303, -1, -1));

        jButtonEditCancel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonEditCancel.setText("EditCancel");
        jButtonEditCancel.setMaximumSize(new java.awt.Dimension(78, 24));
        jButtonEditCancel.setMinimumSize(new java.awt.Dimension(78, 24));
        jButtonEditCancel.setPreferredSize(new java.awt.Dimension(78, 24));
        jButtonEditCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditCancelActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonEditCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(122, 303, -1, -1));

        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 350, -1, -1));
        jPanel1.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 287, 204, 10));

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/img/bank_2_m.jpg"))); // NOI18N

        jPanel2.setBackground(new java.awt.Color(254, 254, 254));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cuenta", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(270, 380));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelTipo.setText("Tipo");
        jPanel2.add(jLabelTipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 35, -1, -1));

        jTextFieldTipoCta.setEditable(false);
        jPanel2.add(jTextFieldTipoCta, new org.netbeans.lib.awtextra.AbsoluteConstraints(89, 32, 120, -1));

        jLabelNro.setText("Numero");
        jPanel2.add(jLabelNro, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 66, -1, -1));

        jLabelEstado.setText("Estado");
        jPanel2.add(jLabelEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 97, -1, -1));

        jTextFieldNumero.setEditable(false);
        jPanel2.add(jTextFieldNumero, new org.netbeans.lib.awtextra.AbsoluteConstraints(89, 63, 120, -1));

        jTextFieldEstado.setEditable(false);
        jPanel2.add(jTextFieldEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(89, 94, 120, -1));

        jLabelLineaCred.setText("Linea Credito");
        jPanel2.add(jLabelLineaCred, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 128, -1, -1));

        jTextFieldLineaCred.setEditable(false);
        jPanel2.add(jTextFieldLineaCred, new org.netbeans.lib.awtextra.AbsoluteConstraints(89, 125, 120, -1));

        jLabelCheque.setText("Cheques");
        jPanel2.add(jLabelCheque, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 159, -1, -1));

        jTextFieldCheques.setEditable(false);
        jPanel2.add(jTextFieldCheques, new org.netbeans.lib.awtextra.AbsoluteConstraints(89, 156, 120, -1));

        jLabelSaldo.setFont(new java.awt.Font("Cantarell", 1, 14)); // NOI18N
        jLabelSaldo.setText("Saldo");
        jPanel2.add(jLabelSaldo, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 203, -1, -1));
        jPanel2.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 193, 10));

        jButtonDepositar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonDepositar.setText("Abonar");
        jButtonDepositar.setMaximumSize(new java.awt.Dimension(78, 24));
        jButtonDepositar.setMinimumSize(new java.awt.Dimension(78, 24));
        jButtonDepositar.setPreferredSize(new java.awt.Dimension(78, 24));
        jButtonDepositar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDepositarActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonDepositar, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 303, -1, -1));

        jButtonRetirar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonRetirar.setText("Cargar");
        jButtonRetirar.setMaximumSize(new java.awt.Dimension(78, 24));
        jButtonRetirar.setMinimumSize(new java.awt.Dimension(78, 24));
        jButtonRetirar.setPreferredSize(new java.awt.Dimension(78, 24));
        jButtonRetirar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRetirarActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonRetirar, new org.netbeans.lib.awtextra.AbsoluteConstraints(122, 303, -1, -1));

        jButtonNewCuenta.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonNewCuenta.setText("Nueva Cuenta");
        jButtonNewCuenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewCuentaActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonNewCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 300, -1, -1));

        jTextFieldSaldo.setEditable(false);
        jTextFieldSaldo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel2.add(jTextFieldSaldo, new org.netbeans.lib.awtextra.AbsoluteConstraints(89, 204, 120, -1));
        jPanel2.add(jTextFieldMonto, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 260, 123, -1));

        jLabelMonto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelMonto.setText("jLabelMonto");
        jPanel2.add(jLabelMonto, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 240, 110, -1));

        jLabelSinCuenta.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelSinCuenta.setText("Cliente sin Cuenta");
        jPanel2.add(jLabelSinCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, 120, -1));

        jPanel2.add(jComboBoxTipoCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 190, 120, -1));

        jButtonCerrar.setText("jButtonCerrar");
        jButtonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCerrarActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 350, -1, -1));
        jPanel2.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 287, 193, 10));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTableHistorial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Glosa", "Tipo", "Monto", "Saldo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableHistorial.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(jTableHistorial);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 2, 580, 360));

        jTabbedPanel.addTab("Historial", jPanel3);

        jTableCheque.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Numero", "Destinatario", "Monto"
            }
        ));
        jScrollPane2.setViewportView(jTableCheque);

        jButtonCheque.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonCheque.setText("Crear Cheque");
        jButtonCheque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChequeActionPerformed(evt);
            }
        });

        jLabelChequeDest.setText("Destinatario:");

        jLabelChequeMonto.setText("Monto:");

        javax.swing.GroupLayout jPanelChequeLayout = new javax.swing.GroupLayout(jPanelCheque);
        jPanelCheque.setLayout(jPanelChequeLayout);
        jPanelChequeLayout.setHorizontalGroup(
            jPanelChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanelChequeLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabelChequeDest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldChequeDest, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabelChequeMonto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldChequeMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChequeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonCheque)
                .addGap(231, 231, 231))
        );
        jPanelChequeLayout.setVerticalGroup(
            jPanelChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChequeLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(jPanelChequeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldChequeDest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelChequeDest)
                    .addComponent(jLabelChequeMonto)
                    .addComponent(jTextFieldChequeMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButtonCheque)
                .addContainerGap())
        );

        jTabbedPanel.addTab("Cheques", jPanelCheque);

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel16.setText("Banco T-SAKPLATA");

        jTextFieldBuscar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldBuscar.setToolTipText("");
        jTextFieldBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldBuscarActionPerformed(evt);
            }
        });

        jButtonBuscar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonBuscar.setText("Buscar Cliente");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel16)))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonBuscar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonBuscar)
                        .addComponent(jTextFieldBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel9))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                    .addComponent(jTabbedPanel))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEditCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditCancelActionPerformed
        jButtonEliminar.setVisible(false);
        if (this.jButtonEditCancel.getText().equals("Editar")) {
            this.jButtonNewSave.setText("Guardar");
            this.jButtonEditCancel.setText("Cancelar");
            this.switchTFieldldClient(true);
        } else { //cancel
            this.jButtonNewSave.setText("Nuevo");
            this.jButtonEditCancel.setText("Editar");
            this.switchTFieldldClient(false);
        }
    }//GEN-LAST:event_jButtonEditCancelActionPerformed

    private void jButtonNewSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewSaveActionPerformed
        jButtonEliminar.setVisible(false);
        if (this.jButtonNewSave.getText().equals("Nuevo")) {
            clearTextFieldCliente();
            clearTextFieldCuenta();
            clearTables();
            this.jButtonNewSave.setText("Guardar");
            this.jButtonEditCancel.setText("Cancelar");
            jButtonEditCancel.setEnabled(true);
            this.switchTFieldldClient(true);
        } else { //SAVE
            this.switchTFieldldClient(false);
            if ( // not empty jTextField Cliente
                    !jTextFieldRut.getText().isEmpty() && !jTextFieldNombres.getText().isEmpty()
                    && !jTextFieldApellidos.getText().isEmpty() && !jTextFieldFechaNac.getText().isEmpty()
                    && !jTextFieldDomicilio.getText().isEmpty() && !jTextFieldFono.getText().isEmpty()
                    && !jTextFieldMail.getText().isEmpty()) {
                // todo ok vo dale
                boolean nuevo = false;
                ClienteDAO clienteDAO = new ClienteDAO();
                Cliente cliente = new Cliente();
                try {
                    cliente.setRut(jTextFieldRut.getText());
                    cliente.setNombres(jTextFieldNombres.getText());
                    cliente.setApellidos(jTextFieldApellidos.getText());
                    try {
                        Date fechaNac = new Date(jTextFieldFechaNac.getText());
                        cliente.setFechaNac(fechaNac);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "ERROR: Fecha Nacimiento (dd/mm/yyyy)");
                    }
                    cliente.setDomicilio(jTextFieldDomicilio.getText());
                    cliente.setFono(Integer.parseInt(jTextFieldFono.getText()));
                    cliente.setMail(jTextFieldMail.getText());
                    cliente.setTipoCuenta("");
                    //this.allClientes.add(cliente); // replaced by ClienteDAO
                    clienteDAO.insert_or_update(cliente);
                    setTexFieldCliente(cliente);
                    setTexFieldCuenta(cliente);
                    setTableHistorial(cliente);
                    //reload data
                    this.allClientes = clienteDAO.findAll();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "ERROR: en campos");
                    initDefaultGUI();
                }
                // replaced by ClienteDAO
//                if (getClientebyRutIndex(jTextFieldRut.getText()) == -1) {
//                    Cliente cliente = new Cliente();
//                    try {
//                        cliente.setRut(jTextFieldRut.getText());
//                        cliente.setNombres(jTextFieldNombres.getText());
//                        cliente.setApellidos(jTextFieldApellidos.getText());
//                        Date fechaNac = new Date(jTextFieldFechaNac.getText());
//                        cliente.setFechaNac(fechaNac);
//                        cliente.setDomicilio(jTextFieldDomicilio.getText());
//                        cliente.setFono(Integer.parseInt(jTextFieldFono.getText()));
//                        cliente.setMail(jTextFieldMail.getText());
//                        cliente.setTipoCuenta("");
//                        //this.allClientes.add(cliente); // agregar a arreglo
//                        System.out.println("nuevo");
//                        clienteDAO.insert_or_update(cliente);
//                        setTexFieldCliente(cliente);
//                        setTexFieldCuenta(cliente);
//                        setTableHistorial(cliente);
//                        initData();//reload data
//                    } catch (Exception e) {
//                        JOptionPane.showMessageDialog(null, "ERROR: en campos");
//                        initDefaultGUI();
//                    }
//
//                } else {
//                    cliente = allClientes.get(getClientebyRutIndex(jTextFieldRut.getText()));
//                    cliente.setRut(jTextFieldRut.getText());
//                    cliente.setNombres(jTextFieldNombres.getText());
//                    cliente.setApellidos(jTextFieldApellidos.getText());
//                    //try {
//                    Date fechaNac = new Date(jTextFieldFechaNac.getText());
//                    cliente.setFechaNac(fechaNac);
//                    //} catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "ERROR: Fecha Nacimiento (dd/mm/yyyy)");
//                    //}
//                    cliente.setDomicilio(jTextFieldDomicilio.getText());
//                    cliente.setFono(Integer.parseInt(jTextFieldFono.getText()));
//                    cliente.setMail(jTextFieldMail.getText());
//                    System.out.println("edit");
//                    clienteDAO.insert_or_update(cliente);
//                    setTexFieldCliente(cliente);
//                    setTexFieldCuenta(cliente);
//                    setTableHistorial(cliente);
//                }
            } else { // popup not empy
                JOptionPane.showMessageDialog(null, "Campos vacios");
            }
            //this.jButtonNewSave.setText("Nuevo");
            //this.jButtonEditCancel.setText("Editar");

        }
    }//GEN-LAST:event_jButtonNewSaveActionPerformed

    private void jButtonDepositarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDepositarActionPerformed
        if (this.jButtonDepositar.getText().equals("Abonar")) {
            jTextFieldMonto.setText("");
            this.jLabelMonto.setVisible(true);
            this.jLabelMonto.setText("Monto Abono");
            this.jTextFieldMonto.setVisible(true);
            this.jButtonDepositar.setText("OK");
            this.jButtonRetirar.setText("Cancelar");
        } else if (this.jButtonDepositar.getText().equals("OK")) { //confirmar deposito/retiro
            //realizar el deposito/retiro
            ClienteDAO clienteDAO = new ClienteDAO();
            cliente = clienteDAO.getClientebyRut(jTextFieldRut.getText());
            int monto = Integer.parseInt(jTextFieldMonto.getText());
            Historial historial;
            Date date = new Date();

            switch (cliente.getTipoCuenta()) {
                case "Ahorro": {
                    ctaAhorro = getCuentaAhorroByRut(cliente.getRut());
                    if (jLabelMonto.getText().contains("Abono")) {
                        ctaAhorro.doAbono(monto);
                    } else if ((ctaAhorro.getSaldo() - monto) < 0) {
                        JOptionPane.showMessageDialog(null, "Excede el saldo");
                    } else {
                        ctaAhorro.doCarga(monto);
                    }
                    break;
                }
                case "Corriente": {
                    ctaCorriente = getCuentaCorrientebyByRut(cliente.getRut());
                    if (jLabelMonto.getText().contains("Abono")) {
                        ctaCorriente.doAbono(monto);
                    } else {
                        int flag = ctaCorriente.doCargaR(monto);
                        if (flag == -1) {
                            JOptionPane.showMessageDialog(null, "Excede el saldo");
                        }
                    }
                    break;
                }
                case "Joven": {
                    ctaJoven = getCuentaJovenByRut(cliente.getRut());
                    if (jLabelMonto.getText().contains("Abono")) {
                        ctaJoven.doAbono(monto);
                    } else if ((ctaJoven.getSaldo() - monto) < 0) {
                        JOptionPane.showMessageDialog(null, "Excede el saldo");
                    } else {
                        ctaJoven.doCarga(monto);
                    }
                    break;
                }
                default:
                    break;
            }
            this.jLabelMonto.setVisible(false);
            this.jTextFieldMonto.setVisible(false);
            this.jButtonDepositar.setText("Abonar");
            this.jButtonRetirar.setText("Cargar");
            setTexFieldCliente(cliente);
            setTexFieldCuenta(cliente);
            setTableHistorial(cliente);

        }
    }//GEN-LAST:event_jButtonDepositarActionPerformed

    private void jButtonRetirarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRetirarActionPerformed
        if (this.jButtonRetirar.getText().equals("Cargar")) {
            this.jTextFieldMonto.setText("");
            this.jLabelMonto.setVisible(true);
            this.jLabelMonto.setText("Monto Retiro");
            this.jTextFieldMonto.setVisible(true);
            this.jButtonDepositar.setText("OK");
            this.jButtonRetirar.setText("Cancelar");
        } else { //cancelar
            this.jLabelMonto.setVisible(false);
            this.jTextFieldMonto.setVisible(false);
            this.jButtonDepositar.setText("Abonar");
            this.jButtonRetirar.setText("Cargar");

        }
    }//GEN-LAST:event_jButtonRetirarActionPerformed

    private void jButtonNewCuentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewCuentaActionPerformed
        if (jButtonNewCuenta.getText().equals("Nueva Cuenta")) {
            jComboBoxTipoCuenta.setVisible(true);
            jLabelSinCuenta.setText("Seleccione el Tipo");
            jButtonNewCuenta.setText("Crear Cuenta");
        } else {
            String tipo = jComboBoxTipoCuenta.getSelectedItem().toString();
            ClienteDAO clienteDAO = new ClienteDAO();
            cliente = clienteDAO.getClientebyRut(jTextFieldRut.getText());
            cliente.setTipoCuenta(tipo);

            switch (tipo) {
                case "Ahorro": {
                    ctaAhorro = new CuentaAhorro(10, 1005, 0, true, "Cuenta Ahorro", cliente);
                    allCuentasAhorro.add(ctaAhorro);
                    break;
                }
                case "Corriente": {
                    ctaCorriente = new CuentaCorriente(500000, 1005, 0, true, "Cuenta Corriente", cliente);
                    allCuentasCorriente.add(ctaCorriente);
                    break;
                }
                case "Joven": {
                    ctaJoven = new CuentaJoven(1005, 0, true, "Joven", cliente);
                    allCuentasJoven.add(ctaJoven);
                    break;
                }
                default:
                    break;
            }
            clienteDAO.update_tipoCuenta(cliente);
            this.allClientes = clienteDAO.findAll();
            initDefaultGUI();
            setTexFieldCliente(cliente);
            setTexFieldCuenta(cliente);
            setTableHistorial(cliente);
        }
    }//GEN-LAST:event_jButtonNewCuentaActionPerformed

    private void jButtonChequeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChequeActionPerformed
        if (this.jButtonCheque.getText().contains("Crear")) {
            switchBtnCheque(true);
            this.jButtonCheque.setText("Emitir Cheque");
        } else if (!this.jTextFieldChequeDest.getText().isEmpty() && !this.jTextFieldChequeMonto.getText().isEmpty()) {
            int response = JOptionPane.showConfirmDialog(null, "Esta seguro?", "Confirmar Eliminacion",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.YES_OPTION) {
                ClienteDAO clienteDAO = new ClienteDAO();
                cliente = clienteDAO.getClientebyRut(jTextFieldRut.getText());
                ctaCorriente = getCuentaCorrientebyByRut(cliente.getRut());
                Date date = new Date();
                Cheque cheque = new Cheque(date, ctaCorriente.getCheques().size(),
                        Integer.parseInt(this.jTextFieldChequeMonto.getText()), this.jTextFieldChequeDest.getText());
                ctaCorriente.addCheque(cheque);
                setTableCheque(cliente);
                switchBtnCheque(false);
                this.jButtonCheque.setText("Crear Cheque");
                setTexFieldCuenta(cliente);
                jTabbedPanel.setSelectedIndex(1);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Campos vacios");
        }
    }//GEN-LAST:event_jButtonChequeActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        int response = JOptionPane.showConfirmDialog(null, "Esta seguro de eliminar este Cliente?", "Confirmar Eliminacion",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            //int index = getClientebyRutIndex(jTextFieldRut.getText()); //replaced by ClienteDAO
            //allClientes.remove(index);                                 //replaced by ClienteDAO
            ClienteDAO clienteDAO = new ClienteDAO();
            clienteDAO.delete(jTextFieldRut.getText());

        }

    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCerrarActionPerformed
        ClienteDAO clienteDAO = new ClienteDAO();
        cliente = clienteDAO.getClientebyRut(jTextFieldRut.getText());
        int response = JOptionPane.showConfirmDialog(null, "Esta seguro?", "Confirmar Cuenta",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            if (cliente.getTipoCuenta().equals("Ahorro")) {
                ctaAhorro = getCuentaAhorroByRut(cliente.getRut());
                ctaAhorro.doAbrirCerrar();
            } else if (cliente.getTipoCuenta().equals("Corriente")) {
                ctaCorriente = getCuentaCorrientebyByRut(cliente.getRut());
                ctaCorriente.doAbrirCerrar();
            } else if (cliente.getTipoCuenta().equals("Joven")) {
                ctaJoven = getCuentaJovenByRut(cliente.getRut());
                ctaJoven.doAbrirCerrar();
            }
        }
        setTexFieldCliente(cliente);
        setTexFieldCuenta(cliente);
        setTableHistorial(cliente);
    }//GEN-LAST:event_jButtonCerrarActionPerformed

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        String search = jTextFieldBuscar.getText();

        cliente = searchCliente(search);
        if (cliente instanceof Cliente) {
            setTexFieldCliente(cliente);
            setTexFieldCuenta(cliente);
            setTableHistorial(cliente);
        } else {
            //
            JOptionPane.showMessageDialog(null, "No encontrado");

        }
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jTextFieldBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldBuscarActionPerformed
        this.jButtonBuscarActionPerformed(evt);
    }//GEN-LAST:event_jTextFieldBuscarActionPerformed

    /* ################################################################### */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonCerrar;
    private javax.swing.JButton jButtonCheque;
    private javax.swing.JButton jButtonDepositar;
    private javax.swing.JButton jButtonEditCancel;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonNewCuenta;
    private javax.swing.JButton jButtonNewSave;
    private javax.swing.JButton jButtonRetirar;
    private javax.swing.JComboBox<String> jComboBoxTipoCuenta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelCheque;
    private javax.swing.JLabel jLabelChequeDest;
    private javax.swing.JLabel jLabelChequeMonto;
    private javax.swing.JLabel jLabelEstado;
    private javax.swing.JLabel jLabelLineaCred;
    private javax.swing.JLabel jLabelMonto;
    private javax.swing.JLabel jLabelNro;
    private javax.swing.JLabel jLabelSaldo;
    private javax.swing.JLabel jLabelSinCuenta;
    private javax.swing.JLabel jLabelTipo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelCheque;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTabbedPane jTabbedPanel;
    private javax.swing.JTable jTableCheque;
    private javax.swing.JTable jTableHistorial;
    private javax.swing.JTextField jTextFieldApellidos;
    private javax.swing.JTextField jTextFieldBuscar;
    private javax.swing.JTextField jTextFieldChequeDest;
    private javax.swing.JTextField jTextFieldChequeMonto;
    private javax.swing.JTextField jTextFieldCheques;
    private javax.swing.JTextField jTextFieldDomicilio;
    private javax.swing.JTextField jTextFieldEdad;
    private javax.swing.JTextField jTextFieldEstado;
    private javax.swing.JTextField jTextFieldFechaNac;
    private javax.swing.JTextField jTextFieldFono;
    private javax.swing.JTextField jTextFieldLineaCred;
    private javax.swing.JTextField jTextFieldMail;
    private javax.swing.JTextField jTextFieldMonto;
    private javax.swing.JTextField jTextFieldNombres;
    private javax.swing.JTextField jTextFieldNumero;
    private javax.swing.JTextField jTextFieldRut;
    private javax.swing.JTextField jTextFieldSaldo;
    private javax.swing.JTextField jTextFieldTipoCta;
    // End of variables declaration//GEN-END:variables

    /* ###################################################################### */
 /* ############################### The GUI Magic ######################## */
 /* ###################################################################### */
    private void initData() {
        /* simulate db data */
        DBFake dbfake = new DBFake();
        ClienteDAO clienteDAO = new ClienteDAO();
        //this.allClientes = dbfake.getAllClientes(); //replaced by ClienteDAO
        this.allClientes = clienteDAO.findAll();
        this.allCuentasAhorro = dbfake.getAllCuentasAhorro();
        this.allCuentasCorriente = dbfake.getAllCuentasCorriente();
        this.allCuentasJoven = dbfake.getAllCuentasJoven();
    }

    private void initDefaultGUI() {
        clearTextFieldCliente();
        clearTextFieldCuenta();
        switchBtnCliente("new-edit");
        switchBtnCuenta("init");
        jComboBoxTipoCuenta.setVisible(false);
        jButtonEliminar.setVisible(false);
        //chargeDataInComboBoxSearch();
        switchBtnCheque(false);
        jLabelLineaCred.setVisible(false);
        jTextFieldLineaCred.setVisible(false);
        jTextFieldCheques.setVisible(false);
        jLabelCheque.setVisible(false);
        jPanelCheque.setVisible(false);
        // ------ set hide Monto
        jLabelMonto.setVisible(false);
        jTextFieldMonto.setVisible(false);
        jButtonNewCuenta.setVisible(false);
        //----- sin cuenta
        jLabelSinCuenta.setVisible(false);
        jButtonDepositar.setVisible(false);
        jButtonRetirar.setVisible(false);
        jTabbedPanel.remove(jPanelCheque);
    }

    /* ###################################################################### */
 /* ############################### BUTTONS ############################## */
 /* ###################################################################### */
    public void switchBtnCliente(String mode) {
        /* set hide jbtn client guardar/cancelar */
        if (mode.equals("new-edit")) {
            jButtonNewSave.setText("Nuevo");
            jButtonEditCancel.setText("Editar");
            if (jTextFieldRut.getText().isEmpty()) {
                jButtonEditCancel.setEnabled(false);
            } else {
                jButtonEditCancel.setEnabled(true);
                jButtonEliminar.setVisible(true);
            }
        } else if (mode.equals("edit")) {
            /* enable edit */
            jButtonEditCancel.setEnabled(true);
        }

    }

    public void switchBtnCuenta(String mode) {
        switch (mode) {
            //
            case "init":
                jButtonCerrar.setVisible(false);
                break;
            case "hasCta":
                jButtonCerrar.setVisible(true);
                if (jTextFieldEstado.getText().equals("Activa")) {
                    jButtonCerrar.setText("Cerrar Cuenta");
                } else if (jTextFieldEstado.getText().equals("Cerrada")) {
                    jButtonCerrar.setText("Activar Cuenta");
                }
                this.jButtonNewCuenta.setVisible(false);
                jLabelSinCuenta.setVisible(false);
                jButtonNewCuenta.setVisible(false);
                jLabelTipo.setVisible(true);
                this.jTextFieldTipoCta.setVisible(true);
                jLabelNro.setVisible(true);
                this.jTextFieldNumero.setVisible(true);
                jLabelEstado.setVisible(true);
                this.jTextFieldEstado.setVisible(true);
                jLabelSaldo.setVisible(true);
                this.jTextFieldSaldo.setVisible(true);
                jButtonDepositar.setVisible(true);
                jButtonRetirar.setVisible(true);
                jComboBoxTipoCuenta.setVisible(false);
                break;
            case "noCta":
                jLabelSinCuenta.setVisible(true);
                jButtonNewCuenta.setVisible(true);
                jLabelTipo.setVisible(false);
                this.jTextFieldTipoCta.setVisible(false);
                jLabelNro.setVisible(false);
                this.jTextFieldNumero.setVisible(false);
                jLabelEstado.setVisible(false);
                this.jTextFieldEstado.setVisible(false);
                jLabelSaldo.setVisible(false);
                this.jTextFieldSaldo.setVisible(false);
                jLabelLineaCred.setVisible(false);
                jTextFieldLineaCred.setVisible(false);
                jTextFieldCheques.setVisible(false);
                jLabelCheque.setVisible(false);
                jButtonDepositar.setVisible(false);
                jButtonRetirar.setVisible(false);
                jButtonCerrar.setVisible(false);
                break;
            default:
                break;
        }

    }

    public void switchBtnCheque(Boolean b) { // init false
        //this.jButtonCheque.setVisible(!b);
        this.jLabelChequeDest.setVisible(b);
        this.jTextFieldChequeDest.setText("");
        this.jTextFieldChequeDest.setVisible(b);
        this.jLabelChequeMonto.setVisible(b);
        this.jTextFieldChequeMonto.setText("");
        this.jTextFieldChequeMonto.setVisible(b);

    }

    /* ###################################################################### */
 /* ############################### TEXTFIELD ############################ */
 /* ###################################################################### */
    void switchTFieldldClient(boolean b) {
        this.jTextFieldRut.setEditable(b);
        this.jTextFieldNombres.setEditable(b);
        this.jTextFieldApellidos.setEditable(b);
        this.jTextFieldFechaNac.setEditable(b);
        //this.jTextFieldEdad.setEditable(b); auto
        this.jTextFieldDomicilio.setEditable(b);
        this.jTextFieldFono.setEditable(b);
        this.jTextFieldMail.setEditable(b);
    }

    private void setTexFieldCliente(Cliente cliente) {
        this.jTextFieldRut.setText(cliente.getRut());
        this.jTextFieldNombres.setText(cliente.getNombres());
        this.jTextFieldApellidos.setText(cliente.getApellidos());
        this.jTextFieldFechaNac.setText(new SimpleDateFormat("dd/MM/yyyy").format(cliente.getFechaNac()));
        this.jTextFieldEdad.setText(Integer.toString(calcularEdad(jTextFieldFechaNac.getText())));
        this.jTextFieldDomicilio.setText(cliente.getDomicilio());
        this.jTextFieldFono.setText(cliente.getFono());
        this.jTextFieldMail.setText(cliente.getMail());
        switchTFieldldClient(false);
        switchBtnCliente("new-edit");

    }

    private void setTexFieldCuenta(Cliente cliente) {
        switch (cliente.getTipoCuenta()) {
            case "Ahorro":
                ctaAhorro = getCuentaAhorroByRut(cliente.getRut());
                this.jTextFieldTipoCta.setText(cliente.getTipoCuenta());
                this.jTextFieldNumero.setText(ctaAhorro.getIdCuentaToString());
                this.jTextFieldEstado.setText(ctaAhorro.getEstado());
                this.jTextFieldSaldo.setText(Integer.toString(ctaAhorro.getSaldo()));
                this.jLabelLineaCred.setVisible(false);
                this.jTextFieldLineaCred.setVisible(false);
                this.jTextFieldCheques.setVisible(false);
                this.jLabelCheque.setVisible(false);
                switchBtnCuenta("hasCta");
                jTabbedPanel.remove(jPanelCheque);
                break;
            case "Corriente":
                ctaCorriente = getCuentaCorrientebyByRut(cliente.getRut());
                this.jTextFieldTipoCta.setText(cliente.getTipoCuenta());
                this.jTextFieldNumero.setText(ctaCorriente.getIdCuentaToString());
                this.jTextFieldEstado.setText(ctaCorriente.getEstado());
                this.jTextFieldSaldo.setText(Integer.toString(ctaCorriente.getSaldo()));
                this.jLabelLineaCred.setVisible(true);
                this.jTextFieldLineaCred.setVisible(true);
                this.jTextFieldCheques.setVisible(true);
                this.jLabelCheque.setVisible(true);
                this.jTextFieldLineaCred.setText(ctaCorriente.getLineaCreditoToString());
                String chequeCount = Integer.toString(ctaCorriente.getCheques().size());
                this.jTextFieldCheques.setText(chequeCount);
                jTabbedPanel.addTab("Cheques", jPanelCheque);
                switchBtnCuenta("hasCta");
                break;
            case "Joven":
                ctaJoven = getCuentaJovenByRut(cliente.getRut());
                this.jTextFieldTipoCta.setText(cliente.getTipoCuenta());
                this.jTextFieldNumero.setText(ctaJoven.getIdCuentaToString());
                this.jTextFieldEstado.setText(ctaJoven.getEstado());
                this.jTextFieldSaldo.setText(Integer.toString(ctaJoven.getSaldo()));
                this.jLabelLineaCred.setVisible(false);
                this.jTextFieldLineaCred.setVisible(false);
                this.jTextFieldCheques.setVisible(false);
                this.jLabelCheque.setVisible(false);
                switchBtnCuenta("hasCta");
                //jTabbedPanel.remove(jPanelCheque);
                break;
            default:
                jButtonNewCuenta.setText("Nueva Cuenta");
                jComboBoxTipoCuenta.removeAllItems();
                int edad = Integer.parseInt(jTextFieldEdad.getText());
                if (edad >= 18 && edad <= 30) {
                    jComboBoxTipoCuenta.addItem("Joven");
                }
                if (edad > 25) {
                    jComboBoxTipoCuenta.addItem("Ahorro");
                    jComboBoxTipoCuenta.addItem("Corriente");
                }
                clearTextFieldCuenta();
                switchBtnCuenta("noCta");
                jTabbedPanel.remove(jPanelCheque);
                break;
        }
        if (jTextFieldEstado.getText().equals("Cerrada")) {
            jButtonDepositar.setEnabled(false);
            jButtonRetirar.setEnabled(false);
            jTextFieldEstado.setForeground(Color.red);
        } else {
            jButtonDepositar.setEnabled(true);
            jButtonRetirar.setEnabled(true);
            jTextFieldEstado.setForeground(Color.black);
        }

        if (jTextFieldSaldo.getText().equals("0")) {
            jTextFieldSaldo.setForeground(Color.red);
        } else {
            jTextFieldSaldo.setForeground(Color.black);
        }

        if (jTextFieldLineaCred.getText().equals("0")) {
            jTextFieldLineaCred.setForeground(Color.red);
        } else {
            jTextFieldLineaCred.setForeground(Color.black);
        }

    }

    /* ###################################################################### */
 /* ############################### TABLES ############################### */
 /* ###################################################################### */
    private void setTableHistorial(Cliente cliente) {
        DefaultTableModel modelJTableHistorial = (DefaultTableModel) jTableHistorial.getModel();
        Historial hs;
        switch (cliente.getTipoCuenta()) {
            case "Ahorro":
                ctaAhorro = getCuentaAhorroByRut(cliente.getRut());
                modelJTableHistorial.setRowCount(0);
                for (int i = 0; i < ctaAhorro.getHistorial().size(); i++) {
                    hs = ctaAhorro.getHistorial().get(i);
                    Object[] row = {hs.getFecha(), hs.getGlosa(), hs.getTipo(), hs.getMonto(), hs.getSaldo()};
                    modelJTableHistorial.addRow(row);
                }
                break;
            case "Corriente":
                ctaCorriente = getCuentaCorrientebyByRut(cliente.getRut());
                modelJTableHistorial.setRowCount(0);
                for (int i = 0; i < ctaCorriente.getHistorial().size(); i++) {
                    hs = ctaCorriente.getHistorial().get(i);
                    Object[] row = {hs.getFecha(), hs.getGlosa(), hs.getTipo(), hs.getMonto(), hs.getSaldo()};
                    modelJTableHistorial.addRow(row);
                }
                setTableCheque(cliente);
                break;
            case "Joven":
                ctaJoven = getCuentaJovenByRut(cliente.getRut());
                modelJTableHistorial.setRowCount(0);
                for (int i = 0; i < ctaJoven.getHistorial().size(); i++) {
                    hs = ctaJoven.getHistorial().get(i);
                    Object[] row = {hs.getFecha(), hs.getGlosa(), hs.getTipo(), hs.getMonto(), hs.getSaldo()};
                    modelJTableHistorial.addRow(row);
                }
                break;
            default:
                modelJTableHistorial.setRowCount(0);
                break;
        }

    }

    private void setTableCheque(Cliente cliente) {
        ctaCorriente = getCuentaCorrientebyByRut(cliente.getRut());
        jTabbedPanel.addTab("Cheques", jPanelCheque);
        DefaultTableModel modeljTableCheque = (DefaultTableModel) jTableCheque.getModel();
        Cheque cq;
        modeljTableCheque.setRowCount(0);
        for (int i = 0; i < ctaCorriente.getCheques().size(); i++) {
            cq = ctaCorriente.getCheques().get(i);
            Object[] row = {cq.getFecha(), cq.getNumero(), cq.getDestinatario(), cq.getMonto()};
            modeljTableCheque.addRow(row);
        }
    }

    /* ###################################################################### */
 /* ############################### CLEAR ################################ */
 /* ###################################################################### */
    void clearTextFieldCliente() {
        this.jTextFieldRut.setText("");
        this.jTextFieldNombres.setText("");
        this.jTextFieldApellidos.setText("");
        this.jTextFieldFechaNac.setText("");
        this.jTextFieldEdad.setText("");
        this.jTextFieldDomicilio.setText("");
        this.jTextFieldFono.setText("");
        this.jTextFieldMail.setText("");
    }

    void clearTextFieldCuenta() {
        this.jTextFieldTipoCta.setText("");
        this.jTextFieldNumero.setText("");
        this.jTextFieldEstado.setText("");
        this.jTextFieldLineaCred.setText("");
        this.jTextFieldCheques.setText("");
        this.jTextFieldSaldo.setText("");
    }

    private void clearTables() {
        DefaultTableModel model = (DefaultTableModel) jTableHistorial.getModel();
        int rows = model.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        jTabbedPanel.remove(jPanelCheque);
    }

    /* ###################################################################### */
 /* ############################## SEARCH ################################ */
 /* ###################################################################### */
//    public Cliente getClientebyRut(String rut){  //replaced by ClienteDAO
//        cliente = null;
//        for(Cliente c : this.allClientes){
//            if(c.getRut().equals(rut)){
//                cliente = c;
//                break;
//            }
//        }
//        return cliente;
//    }
    public CuentaAhorro getCuentaAhorroByRut(String rut) {
        CuentaAhorro cta = null;
        for (CuentaAhorro c : this.allCuentasAhorro) {
            if (c.getCliente().getRut().equals(rut)) {
                cta = c;
                break;
            }
        }
        return cta;
    }

    public CuentaCorriente getCuentaCorrientebyByRut(String rut) {
        CuentaCorriente cta = null;
        for (CuentaCorriente c : this.allCuentasCorriente) {
            if (c.getCliente().getRut().equals(rut)) {
                cta = c;
                break;
            }
        }
        return cta;
    }

    public CuentaJoven getCuentaJovenByRut(String rut) {
        CuentaJoven cta = null;
        for (CuentaJoven c : this.allCuentasJoven) {
            if (c.getCliente().getRut().equals(rut)) {
                cta = c;
                break;
            }
        }
        return cta;
    }

    public int getClientebyRutIndex(String rut) {
        for (Cliente c : this.allClientes) {
            if (c.getRut().equals(rut)) {
                return this.allClientes.indexOf(c);
            }
        }
        return -1;
    }

    // PASAR A ClienteDAO ############################## !!!!!!!!!!!!!!!!!!!!!!!!
    private Cliente searchCliente(String search) {
        search = search.toLowerCase();
        for (Cliente c : this.allClientes) { // mmmmm......... se puede mejorar arto!!
            if (c.getRut().toLowerCase().equals(search)
                    || c.getNombres().toLowerCase().contains(search)
                    || c.getApellidos().toLowerCase().contains(search)
                    || c.getDomicilio().toLowerCase().equals(search)) {
                return c;
            }
        }
        //try cuentas
        for (CuentaAhorro cta : this.allCuentasAhorro) {
            if (Integer.toString(cta.getIdCuenta()).equals(search)) {
                return cta.getCliente();
            }
        }
        for (CuentaCorriente cta : this.allCuentasCorriente) {
            if (Integer.toString(cta.getIdCuenta()).equals(search)) {
                return cta.getCliente();
            }
        }
        for (CuentaJoven cta : this.allCuentasJoven) {
            if (Integer.toString(cta.getIdCuenta()).equals(search)) {
                return cta.getCliente();
            }
        }
        return null;
    }

    /* ###################################################################### */
 /* ############################ OTHER ################################### */
 /* ###################################################################### */
    public static int calcularEdad(String fecha) {
        String datetext = fecha;
        try {
            Calendar birth = new GregorianCalendar();
            Calendar today = new GregorianCalendar();
            int age;
            int factor = 0;
            Date birthDate = new SimpleDateFormat("dd/MM/yyyy").parse(datetext);
            Date currentDate = new Date(); //current date
            birth.setTime(birthDate);
            today.setTime(currentDate);
            if (today.get(Calendar.MONTH) <= birth.get(Calendar.MONTH)) {
                if (today.get(Calendar.MONTH) == birth.get(Calendar.MONTH)) {
                    if (today.get(Calendar.DATE) > birth.get(Calendar.DATE)) {
                        factor = -1; //Aun no celebra su cumpleaÃ±os
                    }
                } else {
                    factor = -1; //Aun no celebra su cumpleaÃ±os
                }
            }
            age = (today.get(Calendar.YEAR) - birth.get(Calendar.YEAR)) + factor;
            return age;
        } catch (ParseException e) {
            return -1;
        }
    }

}
